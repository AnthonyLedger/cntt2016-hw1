#include<bits/stdc++.h>
#define MOD 1000000007
using namespace std;const int MAXN=60;const int MAXS=70000;const int MAXM=7000;typedef long long LL;int n,m,tot,Hash[MAXN];int a[MAXN],b[MAXN];bool isv[1<<16];int cnt,valid[MAXM];vector<int>valids[MAXM];int tcnt,nxt[MAXN*MAXN][26],id[MAXN*MAXN];int g[MAXN],ecnt;struct edge{int t,nxt;}e[MAXN<<1];void addedge(int a,int b){e[++ecnt].t=b;e[ecnt].nxt=g[a];g[a]=ecnt;}void dfs(int x,int pre){if(id[x]){if(pre)addedge(pre,id[x]);pre=id[x];}for(int i=0;i<26;++i)if(nxt[x][i])dfs(nxt[x][i],pre);}int f[MAXN][MAXS];int F[2][MAXS],O;void update(int&a,int b){a+=b;a%=MOD;}void dp(int x){for(int i=g[x];i;i=e[i].nxt)dp(e[i].t);memset(F,0,sizeof F);O=0;F[O][0]=1;for(int i=g[x];i;i=e[i].nxt){O^=1;memset(F[O],0,sizeof F[O]);for(int j=1;j<=cnt;++j)for(int k=0;k<valids[j].size();++k)update(F[O][valid[j]],1LL*F[O^1][valids[j][k]]*f[e[i].t][valid[j]-valids[j][k]]%MOD);}for(int j=1;j<=cnt;++j){int s=valid[j];update(f[x][s],F[O][s]);if(x==n+1)continue;for(int u=s;u;u-=(u&(-u)))update(f[x][s],F[O][s-(u&(-u))]);}}class SimilarNames{void Init(vector<string>names,vector<int>data1,vector<int>data2){tcnt=1;id[1]=n+1;for(int i=0;i<n;++i){int x=1;for(int j=0;j<names[i].length();++j){int c=names[i][j]-'a';if(!nxt[x][c])nxt[x][c]=++tcnt;x=nxt[x][c];}id[x]=i+1;}ecnt=0;dfs(1,0);m=data1.size();int tmp[MAXN];tot=0;for(int i=0;i<m;++i)tmp[++tot]=data1[i],tmp[++tot]=data2[i];sort(tmp+1,tmp+tot+1);tot=unique(tmp+1,tmp+tot+1)-tmp-1;for(int i=1;i<=tot;++i)Hash[tmp[i]]=i-1;for(int i=0;i<m;++i)a[i]=Hash[data1[i]],b[i]=Hash[data2[i]];cnt=0;for(int s=0;s<(1<<tot);++s){bool flag=1;for(int i=0;i<m;++i)if((s&(1<<a[i]))&&!(s&(1<<b[i]))){flag=0;break;}if(flag)valid[++cnt]=s,isv[s]=1;}for(int i=1;i<=cnt;++i)valids[i].clear();for(int i=1;i<=cnt;++i){int S=valid[i];for(int A=S;;A=(A-1)&S){if(isv[A]&&isv[S-A])valids[i].push_back(A);if(!A)break;}}}int Solve(){dp(n+1);int ans=f[n+1][(1<<tot)-1];for(int i=1;i<=n-tot;++i)ans=1LL*ans*i%MOD;return ans;}public:int count(vector<string>names,vector<int>data1,vector<int>data2){n=names.size();Init(names,data1,data2);return Solve();}};