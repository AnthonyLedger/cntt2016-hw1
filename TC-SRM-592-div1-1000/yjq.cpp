#include<bits/stdc++.h>
using namespace std;const int MAXN=30;int n;const double pi=acos(-1.0);struct Complex{double x,y;Complex(double a_=0,double b_=0){x=a_,y=b_;}Complex operator*(const Complex ano)const{return Complex(x*ano.x-y*ano.y,x*ano.y+y*ano.x);}Complex operator+(const Complex ano)const{return Complex(x+ano.x,y+ano.y);}}w[MAXN];Complex sqrt(Complex x){double arg=atan2(x.y,x.x);arg/=2;double len=sqrt(x.x*x.x+x.y*x.y);len=sqrt(len);return Complex(len*cos(arg),len*sin(arg));}vector<Complex>Dft(vector<Complex>a){vector<Complex>res;res.clear();for(int i=0;i<n;i++){Complex sum=Complex(0,0);for(int j=0;j<n;j++)sum=sum+a[j]*w[i*j%n];res.push_back(sum);}return res;}class SplittingFoxes2{public:bool check(vector<int>v,vector<int>a){for(int i=0;i<n;i++){if(v[i]<0)return 0;int s=0;for(int j=0;j<n;j++)s+=v[j]*v[(i-j+n)%n];if(s!=a[i])return 0;}return 1;}bool cmp(vector<int>v,vector<int>a){for(int i=0;i<n;i++){if(v[i]<a[i])return 1;else if(v[i]>a[i])return 0;}return 0;}vector<int>getPattern(vector<int>a){n=a.size();vector<int>ans;w[0]=Complex(1,0);for(int i=1;i<n;i++)w[i]=w[i-1]*Complex(cos(2*pi/n),sin(2*pi/n));vector<Complex>b;for(int i=0;i<n;i++)b.push_back(Complex(a[i],0));b=Dft(b);for(int i=0;i<n;i++)b[i]=sqrt(b[i]);for(int i=0;i<n;i++)w[i].y=-w[i].y;int N=(n>>1)+1;for(int i=0;i<(1<<N);i++){vector<Complex>tmp;for(int j=0;j<n;j++)tmp.push_back(b[j]);for(int j=0;j<n;j++){if(i&(1<<min(j,n-j)))tmp[j].x=-tmp[j].x,tmp[j].y=-tmp[j].y;}tmp=Dft(tmp);vector<int>v;for(int j=0;j<n;j++){v.push_back(int(tmp[j].x/n+0.423535363562365236));}if(check(v,a)&&(ans.empty()||cmp(v,ans)))ans=v;}if(!ans.size())ans.push_back(-1);return ans;}};